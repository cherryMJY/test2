# Generated by Django 2.0.5 on 2020-05-13 07:08

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TAttrbuteAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_id', models.IntegerField(blank=True, null=True)),
                ('attribute_alias', models.CharField(blank=True, max_length=20, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
                ('create_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_attrbute_alias',
            },
        ),
        migrations.CreateModel(
            name='TAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_name', models.CharField(blank=True, max_length=20, null=True)),
                ('attribute_datatype', models.CharField(blank=True, max_length=20, null=True)),
                ('is_single_value', models.IntegerField(blank=True, null=True)),
                ('attribute_description', models.TextField(blank=True, null=True)),
                ('category_id', models.IntegerField(blank=True, null=True)),
                ('create_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_attribute',
            },
        ),
        migrations.CreateModel(
            name='TAttributeMapLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_name', models.CharField(blank=True, max_length=20, null=True)),
                ('is_map', models.IntegerField(blank=True, null=True)),
                ('entity_id', models.CharField(blank=True, max_length=20, null=True)),
                ('map_attribute_id', models.IntegerField(blank=True, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
                ('map_rule_id', models.IntegerField(blank=True, null=True)),
                ('repo_id', models.IntegerField(blank=True, null=True)),
                ('category_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_attribute_map_log',
            },
        ),
        migrations.CreateModel(
            name='TCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(blank=True, max_length=20, null=True)),
                ('father_category_id', models.CharField(blank=True, max_length=20, null=True)),
                ('is_temporary', models.IntegerField(blank=True, null=True)),
                ('category_description', models.TextField(blank=True, null=True)),
                ('repo_id', models.IntegerField(blank=True, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
                ('create_time', models.DateTimeField(blank=True, null=True)),
                ('category_level', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_category',
            },
        ),
        migrations.CreateModel(
            name='TCleaningLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_id', models.CharField(blank=True, max_length=20, null=True)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('cleaning_rule_id', models.IntegerField(blank=True, null=True)),
                ('cleaning_content', models.TextField(blank=True, null=True)),
                ('cleaning_result', models.TextField(blank=True, null=True)),
                ('category_id', models.IntegerField(blank=True, null=True)),
                ('repo_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_cleaning_log',
            },
        ),
        migrations.CreateModel(
            name='TCleaningRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_id', models.IntegerField(blank=True, null=True)),
                ('is_cleaning', models.IntegerField(blank=True, null=True)),
                ('cleaning_rule', models.CharField(blank=True, max_length=20, null=True)),
                ('create_time', models.DateTimeField(blank=True, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
                ('category_id', models.IntegerField(blank=True, null=True)),
                ('is_custom', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_cleaning_rule',
            },
        ),
        migrations.CreateModel(
            name='TDataAcquisitionLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(blank=True, null=True)),
                ('data_source', models.TextField(blank=True, null=True)),
                ('data_access', models.CharField(blank=True, max_length=20, null=True)),
                ('repo_id', models.IntegerField(blank=True, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_data_acquisition_log',
            },
        ),
        migrations.CreateModel(
            name='TDataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datatype_name', models.CharField(blank=True, max_length=20, null=True)),
                ('datatype_identifier', models.CharField(blank=True, max_length=20, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
                ('create_time', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_data_type',
            },
        ),
        migrations.CreateModel(
            name='TEntityExtractionLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_source', models.CharField(blank=True, max_length=20, null=True)),
                ('is_extract', models.IntegerField(blank=True, null=True)),
                ('entity_number', models.IntegerField(blank=True, null=True)),
                ('extract_time', models.DateTimeField(blank=True, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
                ('repo_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_entity_extraction_log',
            },
        ),
        migrations.CreateModel(
            name='TMappingRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_name', models.CharField(blank=True, max_length=20, null=True)),
                ('coverage_rate', models.IntegerField(blank=True, null=True)),
                ('map_attribute_id', models.IntegerField(blank=True, null=True)),
                ('create_time', models.DateTimeField(blank=True, null=True)),
                ('category_id', models.IntegerField(blank=True, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_mapping_rule',
            },
        ),
        migrations.CreateModel(
            name='TNormalizedLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('merge_entity_id', models.CharField(blank=True, max_length=20, null=True)),
                ('original_entity_id', models.CharField(blank=True, max_length=20, null=True)),
                ('normalized_rule_id', models.IntegerField(blank=True, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
                ('repo_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_normalized_log',
            },
        ),
        migrations.CreateModel(
            name='TNormalizedRule',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('category_id', models.IntegerField(blank=True, null=True)),
                ('rule_number', models.IntegerField(blank=True, null=True)),
                ('update_time', models.DateTimeField(blank=True, null=True)),
                ('overall_threshold', models.FloatField(blank=True, null=True)),
                ('repo_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_normalized_rule',
            },
        ),
        migrations.CreateModel(
            name='TNormalizedRuleDetail',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('normalized_rule_id', models.IntegerField(blank=True, null=True)),
                ('attribute_id', models.IntegerField(blank=True, null=True)),
                ('similarity_threshold', models.FloatField(blank=True, null=True)),
                ('update_time', models.DateTimeField(blank=True, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_normalized_rule_detail',
            },
        ),
        migrations.CreateModel(
            name='TRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repo_name', models.CharField(blank=True, max_length=20, null=True)),
                ('repo_description', models.TextField(blank=True, null=True)),
                ('create_id', models.IntegerField(blank=True, null=True)),
                ('create_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_repository',
            },
        ),
        migrations.CreateModel(
            name='TUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_account', models.CharField(blank=True, max_length=20, null=True)),
                ('user_password', models.CharField(blank=True, max_length=20, null=True)),
                ('user_name', models.CharField(blank=True, max_length=20, null=True)),
                ('create_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_user',
            },
        ),
    ]
